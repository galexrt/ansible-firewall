#!/bin/bash
{{ ansible_managed | comment }}

IPTABLES="{{ firewall_iptables_path }}"

"$IPTABLES" -F
"$IPTABLES" -t nat -F
"$IPTABLES" -t mangle -F
"$IPTABLES" -X
"$IPTABLES" -t nat -X
"$IPTABLES" -t mangle -X

{% for table in firewall_iptables %}
{% for chain in table.chains %}
{% if (chain.only_on_hosts is not defined and chain.not_on_hosts is not defined) or (chain.only_on_hosts is defined and chain.not_on_hosts is defined) or (chain.only_on_hosts is defined and inventory_hostname in chain.only_on_hosts) or (chain.not_on_hosts is defined and inventory_hostname not in chain.not_on_hosts) %}
# <BEGIN {{ chain.name }} CHAIN DEFAULT_POLICY: {{ chain.default_policy|default(firewall_chain_default_policy) }}>
{% if chain.name not in firewall_default_chains %}
"$IPTABLES" -t {{ table.name }} -N {{ chain.name }}
{% endif %}
{% for rule in chain.rules %}
{% if (rule.only_on_hosts is not defined and rule.not_on_hosts is not defined) or (rule.only_on_hosts is defined and rule.not_on_hosts is defined) or (rule.only_on_hosts is defined and inventory_hostname in rule.only_on_hosts) or (rule.not_on_hosts is defined and inventory_hostname not in rule.not_on_hosts) %}
{% if rule.name is defined and firewall_generation_with_comments %}
## {{ rule.name }}
{% endif %}
{% if rule.custom is not defined %}
"$IPTABLES" -t {{ table.name }} -A {{ chain.name }} -j {{ rule.jump }}
{%- if rule.iniface is defined %} -i {{ rule.iniface }}{% endif %}
{%- if rule.outiface is defined %} -o {{ rule.outiface }}{% endif %}
{%- if rule.proto is defined and rule.proto != "all" %} -p {{ rule.proto }}{% endif %}
{% if rule.proto is defined and rule.proto == "icmp" %}
    {%- if rule.icmp_type is defined %} --icmp-type {{ rule.icmp_type }}{% endif %}
{% endif %}
{%- if rule.dport is defined %} --dport {{ rule.dport }}{% endif %}
{%- if rule.dports is defined %} -m multiport --dports {% for port in rule.dports %}{{ port }}{% if not loop.last %},{% endif %}{% endfor %}{% endif %}
{%- if rule.sport is defined %} --sport {{ rule.sport }}{% endif %}
{%- if rule.sports is defined %} -m multiport --sports {{ rule.sports }}{% endif %}
{%- if rule.to_destination is defined %} --to-destination {{ rule.to_destination }}{% endif %}
{%- if rule.destination is defined %}
    {%- if rule.not_destination is defined and rule.not_destination == true %} !{% endif %} -d {{ rule.destination }}
{% endif %}
{%- if rule.source is defined %}
    {%- if rule.not_source is defined and rule.not_source == true %} !{% endif %} -s {{ rule.source }}
{% endif %}
{%- if rule.src_range is defined %} --src-range {{ rule.src_range }}{% endif %}
{%- if rule.src_type is defined %} --src-type {{ rule.src_type }} {% endif %}
{%- if rule.dst_range is defined %} --dst-range {{ rule.dst_range }}{% endif %}
{%- if rule.dst_type is defined %} --dst-type {{ rule.dst_type }}{% endif %}
{%- if rule.jump == "MARK" %}
    {%- if rule.set_mark is defined %} --set-mark {{ rule.set_mark }}{% endif %}
{% endif %}
{%- if rule.jump == "CONNMARK" %}
    {%- if rule.restore_mark is defined %} --save-mark{% endif %}
    {%- if rule.save_mark is defined %} --restore-mark{% endif %}
{% endif %}
{%- if rule.length is defined %} -m length --limit {{ rule.length }}{% endif %}
{%- if rule.connmark is defined and rule.connmark.id is defined %} -m mark{% if rule.connmark.negative is defined and rule.connmark.negative %} !{% endif %} --mark {{ rule.connmark.id }}{% endif %}
{%- if rule.proto is defined and rule.proto == "tcp" and rule.tcp_flags is defined %} --tcp-flags {% for flag in rule.tcp_flags %}{{ flag }}{% if not loop.last %} {% endif %}{% endfor %}{% endif %}
{%- if rule.limit is defined %} -m limit --limit {{ rule.limit }}{% if rule.limit_burst is defined %} --limit-burst {{ rule.limit_burst }}{% endif %}{% endif %}
{%- if rule.ctstate is defined %} -m conntrack --ctstate {% for state in rule.ctstate %}{{ state }}{% if not loop.last %},{% endif %}{% endfor %}{% endif %}
{%- if rule.state is defined %} -m state --state {% for state in rule.state %}{{ state }}{% if not loop.last %},{% endif %}{% endfor %}{% endif %}
{%- if rule.jump == "SET" %}
    {%- if rule.add_set is defined and rule.add_set.name is defined %} --add-set {{ rule.add_set.name }} {{ rule.add_set.field|default('src') }}{% endif %}
{% else %}
    {%- if rule.match_set is defined %} -m set --match-set {{ rule.match_set }} {{ rule.match_set_mode|default('src') }}{% endif %}
{% endif %}
{%- if rule.jump == "REJECT" %}
    {%- if rule.reject_with is defined %} --reject-with {{ rule.reject_with|trim }}{% endif %}
{% endif -%}
{%- if rule.jump == "LOG" %}
    {%- if rule.log_prefix is defined %} --log-prefix "{{ rule.log_prefix }} "{% endif %}
    {%- if rule.log_level is defined %} --log-level {{ rule.log_level }}{% endif %}
    {%- if rule.log_ip_options is defined and rule.log_ip_options %} --log-ip-options{% endif %}
{% endif %}

{% else %}
"$IPTABLES" {{ rule.custom }}
{% endif %}
{% endif %}
{% endfor %}
{%- if chain.default_policy is defined %}
# SET DEFAULT POLICY {{ chain.default_policy|default(firewall_chain_default_policy) }}
"$IPTABLES" -t {{ table.name|default('filter') }} -P {{ chain.name }} {{ chain.default_policy|default(firewall_chain_default_policy) }}
{% endif %}
# </END {{ chain.name }} CHAIN>
{% endif %}
{% endfor %}
{% endfor %}
